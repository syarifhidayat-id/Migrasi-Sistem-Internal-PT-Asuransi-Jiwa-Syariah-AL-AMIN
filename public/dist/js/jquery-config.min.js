function bsimpan(id, text) {
    $('#' + id).html('<i class="fa-solid fa-floppy-disk"></i> ' + text);
}

function getKode(kode) {
    $('#' + kode);
}

function formatHp(kode) {
    Inputmask({
        "mask" : "999-9999-9999"
    }).mask("#" + kode);
}

function formatAngka(kode) {
    const id = $('#' + kode).val();
}

function formatNum(number, decimals, decPoint, thousandsSep) {
    //  discuss at: https://locutus.io/php/number_format/
    // original by: Jonas Raoni Soares Silva (https://www.jsfromhell.com)
    // improved by: Kevin van Zonneveld (https://kvz.io)
    // improved by: davook
    // improved by: Brett Zamir (https://brett-zamir.me)
    // improved by: Brett Zamir (https://brett-zamir.me)
    // improved by: Theriault (https://github.com/Theriault)
    // improved by: Kevin van Zonneveld (https://kvz.io)
    // bugfixed by: Michael White (https://getsprink.com)
    // bugfixed by: Benjamin Lupton
    // bugfixed by: Allan Jensen (https://www.winternet.no)
    // bugfixed by: Howard Yeend
    // bugfixed by: Diogo Resende
    // bugfixed by: Rival
    // bugfixed by: Brett Zamir (https://brett-zamir.me)
    //  revised by: Jonas Raoni Soares Silva (https://www.jsfromhell.com)
    //  revised by: Luke Smith (https://lucassmith.name)
    //    input by: Kheang Hok Chin (https://www.distantia.ca/)
    //    input by: Jay Klehr
    //    input by: Amir Habibi (https://www.residence-mixte.com/)
    //    input by: Amirouche
    //   example 1: number_format(1234.56)
    //   returns 1: '1,235'
    //   example 2: number_format(1234.56, 2, ',', ' ')
    //   returns 2: '1 234,56'
    //   example 3: number_format(1234.5678, 2, '.', '')
    //   returns 3: '1234.57'
    //   example 4: number_format(67, 2, ',', '.')
    //   returns 4: '67,00'
    //   example 5: number_format(1000)
    //   returns 5: '1,000'
    //   example 6: number_format(67.311, 2)
    //   returns 6: '67.31'
    //   example 7: number_format(1000.55, 1)
    //   returns 7: '1,000.6'
    //   example 8: number_format(67000, 5, ',', '.')
    //   returns 8: '67.000,00000'
    //   example 9: number_format(0.9, 0)
    //   returns 9: '1'
    //  example 10: number_format('1.20', 2)
    //  returns 10: '1.20'
    //  example 11: number_format('1.20', 4)
    //  returns 11: '1.2000'
    //  example 12: number_format('1.2000', 3)
    //  returns 12: '1.200'
    //  example 13: number_format('1 000,50', 2, '.', ' ')
    //  returns 13: '100 050.00'
    //  example 14: number_format(1e-8, 8, '.', '')
    //  returns 14: '0.00000001'
    number = (number + '').replace(/[^0-9+\-Ee.]/g, '')
    const n = !isFinite(+number) ? 0 : +number
    const prec = !isFinite(+decimals) ? 0 : Math.abs(decimals)
    const sep = (typeof thousandsSep === 'undefined') ? ',' : thousandsSep
    const dec = (typeof decPoint === 'undefined') ? '.' : decPoint
    let s = ''
    const toFixedFix = function (n, prec) {
        if (('' + n).indexOf('e') === -1) {
        return +(Math.round(n + 'e+' + prec) + 'e-' + prec)
        } else {
        const arr = ('' + n).split('e')
        let sig = ''
        if (+arr[1] + prec > 0) {
            sig = '+'
        }
        return (+(Math.round(+arr[0] + 'e' + sig + (+arr[1] + prec)) + 'e-' + prec)).toFixed(prec)
        }
    }
    // @todo: for IE parseFloat(0.55).toFixed(0) = 0;
    s = (prec ? toFixedFix(n, prec).toString() : '' + Math.round(n)).split('.')
    if (s[0].length > 3) {
        s[0] = s[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, sep)
    }
    if ((s[1] || '').length < prec) {
        s[1] = s[1] || ''
        s[1] += new Array(prec - s[1].length + 1).join('0')
    }
    return s.join(dec);
}

function tombol(kondisi, idBtn, isinya) {
    $('body').on(kondisi, '#'+idBtn, isinya);
}

function messages(msg) {
    $.each(msg, function(key, val) {
        // console.log(key);
        $('.' + key + '_err').text(val);
    });
}

function setHide(kode, kondisi) {
    var id = $('#' + kode);
    if (kondisi == true) {
        return id.hide();
    }
    if (kondisi == false) {
        return id.show();
    }
}

function hidePesan(kode) {
    const id = $('#' + kode);
    if (id.hasClass('form-control')) {
        id.change(function(e) {
            e.preventDefault();
            $('.' + kode + '_err').text('');
        });

        id.keyup(function(e) {
            e.preventDefault();
            $('.' + kode + '_err').text('');
        });
    }
    if (id.hasClass('form-select')) {
        id.change(function(e) {
            e.preventDefault();
            $('.' + kode + '_err').text('');
        });

        id.keyup(function(e) {
            e.preventDefault();
            $('.' + kode + '_err').text('');
        });
    }
    if (id.hasClass('easyui-textbox')) {
        $('.' + kode + '_err').text('');
    }
    if (id.hasClass('easyui-combobox')) {
        $('.' + kode + '_err').text('');
    }
    if (id.hasClass('easyui-combogrid')) {
        $('.' + kode + '_err').text('');
    }
    if (id.hasClass('selectGrid')) {
        $('.' + kode + '_err').text('');
    }
}

function clearForm(kode) {
    var id = $('#' + kode);
    if(id.hasClass('form-mixs')) {
        id.form('clear');
    }
    id.trigger('reset');
    clearSelect();
    $('.error-text').text('');
}

function clearSelect() {
    $('form .form-select').val(null).trigger('change');
}

function reset() {
    location.reload(true);
}

function openModal(idModal) {
    $('#' + idModal).attr({
        'data-bs-backdrop': 'static',
        'data-bs-keyboard': 'false',
        'aria-labelledby': 'staticBackdropLabel',
    }).modal('show');
}

function closeModal(idModal) {
    $('#' + idModal).modal('hide');
}

function titleAction(id, text) {
    $('#' + id).text(text);
}

function selectTable (kode, url, valText, valId, field, fieldcustom) {
    $("#" + kode).inputpicker({
        headShow: true,
        url: url,
        // urlHeaders: {
        //     "X-Token": $('meta[name="csrf-token"]').attr('content')
        // },
        fields:field,
        fieldText : valText,
        fieldValue: valId,
        fields: fieldcustom,
        filterOpen: true,
        autoOpen: true,
    });
}

function selectOp(kode) {
    $('#' + kode).select2();
}

function selectOpTag(kode) {
    $('#' + kode).select2({
        tags: true,
    });
}

function selectSideTag(kode, url, dataRes, getVal) {
    $('#' + kode).select2({
        ajax: {
            url: url,
            dataType: 'json',
            delay: 250,
            processResults: function(data) {
                return {
                    results: $.map(data, dataRes)
                };
            },
            cache: true
        },
        // createTag: function (tag) {
        //     var term = $.trim(tag.term);

        //     if (term === '') {
        //       return null;
        //     }

        //     return {
        //       id: term,
        //       text: term,
        //       newTag: true // add additional parameters
        //     }
        // },
        createTag: function(tag) {
            return {
                id: tag.term,
                text: tag.term.toLowerCase(),
                isNew : true
            };
        },
        tags: true,
        tokenSeparators: [',', '.'],
    }).on('select2:select', getVal);
}

function selectEdit(kode, idVal, textVal) {
    var newOption = new Option(textVal, idVal, true, true);
    $('#' + kode).append(newOption).trigger('change');
}

function onSelect (kode, getSel) {
    const id = $('#' + kode);
    id.on('select2:select', getSel);
}

function selectSide(kode, kondisi, url, dataRes, getVal) {
    const id = $('#' + kode);
    if (kondisi==true) {
        id.select2({
            ajax: {
                url: url,
                // data: datacari,
                dataType: 'json',
                delay: 250,
                processResults: function(data) {
                    return {
                        results: $.map(data, dataRes)
                    };
                },
                cache: true
            },
            // templateResult: formatRepo,
            // templateSelection: formatRepoSelection
        }).on('select2:select', getVal);
        id.next().find('[aria-labelledby="select2-'+kode+'-container"]').css({ 'background-color': '#ffc8c883' });
    }
    if (kondisi==false) {
        id.select2({
            ajax: {
                url: url,
                // data: datacari,
                dataType: 'json',
                delay: 250,
                processResults: function(data) {
                    return {
                        results: $.map(data, dataRes)
                    };
                },
                cache: true
            },
            // templateResult: formatRepo,
            // templateSelection: formatRepoSelection
        }).on('select2:select', getVal);
        id.next().find('[aria-labelledby="select2-'+kode+'-container"]').css({ 'background-color': '' });
    }
}

function changeSelect(id_get, id_val, url, dataRes, getVal) {
    $('#' + id_get).change(function() {
        var kode = $(this).val();
        if (kode !== "" && kode !== null) {
            selectSide(id_val, false, url + '/' + kode, dataRes, getVal);
        } else {
            $('#' + id_val).val(null).trigger('change');
        }
    });
}

function changeSelect2(id_get1, id_get2, id_val, url, data, getVal) {
    $('#' + id_get1).change(function() {
        var kode1 = $(this).val();
        if (kode1 !== "" && kode1 !== null) {
            $('#' + id_get2).change(function() {
                var kode2 = $(this).val();
                if (kode1 !== "" && kode1 !== null) {
                    selectSide(
                        id_val,
                        url + '/' + kode1 + '/' + kode2,
                        data,
                        getVal,
                        false,
                    );
                } else {
                    $('#' + id_val).val(null).trigger('change');
                }
            });
        } else {
            $('#' + id_val).val(null).trigger('change');
        }
    });
}

function setTextReq(kode, kondisi) {
    const id = $('#' + kode);
    if (id.hasClass('form-control')) {
        if (kondisi == true) {
            id.css({ 'background-color': '#ffc8c883' });
        } else if (kondisi == false) {
            id.css({ 'background-color': '' });
        }
    }
    if (id.hasClass('form-select')) {
        if (kondisi == true) {
            id.next().find('[aria-labelledby="select2-'+kode+'-container"]').css({ 'background-color': '#ffc8c883' });
        } else if (kondisi == false) {
            id.next().find('[aria-labelledby="select2-'+kode+'-container"]').css({ 'background-color': '' });
        }
    }
    if (id.hasClass('easyui-textbox')) {
        if (kondisi == true) {
            id.textbox().next().addClass('textbox-required').hasClass('textbox-text');
        } else if (kondisi == false) {
            id.textbox().next().removeClass('textbox-required').hasClass('textbox-text');
        }
    }
    if (id.hasClass('easyui-combobox')) {
        if (kondisi == true) {
            id.combobox().next().addClass('textbox-required').hasClass('textbox-text');
        } else if (kondisi == false) {
            id.combobox().next().removeClass('textbox-required').hasClass('textbox-text');
        }
    }
    if (id.hasClass('selectGrid')) {
        if (kondisi == true) {
            id.combogrid().next().addClass('textbox-required').hasClass('textbox-text');
        } else if (kondisi == false) {
            id.combogrid().next().removeClass('textbox-required').hasClass('textbox-text');
        }
    }
}

function setCheck(kode, kondisi) {
    const id = $(kode);
    return id.prop("checked", kondisi);
}

function setText(kode, v) {
    const id = $('#' + kode);
    if (id.hasClass('form-control')) {
        return id.val(v);
    }
    if (id.hasClass('form-check-input')) {
        return id.val(v);
    }
    if (id.hasClass('form-select')) {
        var change = id.select2();
        return change.val(v).trigger("change");
        // const newOption = new Option(v, v, true, true);
        // return id.append(newOption);
    }
    if (id.hasClass('easyui-textbox')) {
        return id.textbox('setValue', v);
    }
    if (id.hasClass('easyui-combobox')) {
        return id.combobox('setValue', v);
    }
    if (id.hasClass('easyui-combogrid')) {
        return id.combogrid('setValue', v);
    }
    // if (id.hasClass('selectGrid')) {
    //     return id.combogrid('setValue', v);
    // }
}

function setSelect(kode, value) {
    var newOption = new Option(value, value, true, true);
    const id = $('#' + kode);
    return id.append(newOption);
}

function setTextReadOnly(kode, kondisi) {
    const id = $('#' + kode);
    if (id.hasClass('form-control')) {
        if (kondisi == true) {
            id.prop('readonly', kondisi);
            id.css({ 'background-color': '#ffcc8a83' });
        } else if (kondisi == false) {
            id.prop('readonly', kondisi);
            id.css({ 'background-color': '' });
        }
    }
    if (id.hasClass('form-select') || id.hasClass('form-select-solid')) {
        if (kondisi == true) {
            // id.next().find('span.selection span.select2-selection').css({ 'background-color': '#ffcc8a83' });
            id.select2().next().find('[aria-labelledby="select2-'+kode+'-container"]').css({ 'background-color': '#ffcc8a83' });
            id.prop('disabled', kondisi);
        } else if ( kondisi == false) {
            // id.next().find('span.selection span.select2-selection').css({ 'background-color': '' });
            id.select2().next().find('[aria-labelledby="select2-'+kode+'-container"]').css({ 'background-color': '' });
            id.prop('disabled', kondisi);
        }
    }
    if (id.hasClass('easyui-textbox')) {
        // id.css({ 'background-color': '#ffcc8a83' });
        if (kondisi == true) {
            id.textbox('readonly', kondisi);
        } else if ( kondisi == false) {
            id.textbox('readonly', kondisi);
        }
    }
    if (id.hasClass('easyui-combobox')) {
        // id.css({ 'background-color': '#ffcc8a83' });
        if (kondisi == true) {
            id.combobox('readonly', kondisi);
        } else if ( kondisi == false) {
            id.combobox('readonly', kondisi);
        }
    }
    if (id.hasClass('easyui-combogrid')) {
        // id.css({ 'background-color': '#ffcc8a83' });
        if (kondisi == true) {
            id.combogrid('readonly', kondisi);
        } else if ( kondisi == false) {
            id.combogrid('readonly', kondisi);
        }
    }
    // if (id.hasClass('selectGrid')) {
    //     // id.css({ 'background-color': '#ffcc8a83' });
    //     id.combogrid('readonly', kondisi);
    // }
}

function getText(kode) {
    const id = $('#' + kode);
    if (id.hasClass('form-control')) {
        return id.val();
    }
    if (id.hasClass('form-check-input')) {
        return id.val();
    }
    if (id.hasClass('form-select')) {
        return id.val();
    }
    if (id.hasClass('easyui-textbox')) {
        return id.textbox('getValue');
    }
    if (id.hasClass('easyui-combobox')) {
        return id.combobox('getValue');
        // return id.val();
    }
    if (id.hasClass('easyui-combogrid')) {
        return id.combogrid('getValue');
    }
    // if (id.hasClass('selectGrid')) {
    //     return id.combogrid('getValue');
    // }
}

function logSelect(id) {
    $('#' + id).change(function() {
        var cek = $(this).val();
        console.log(cek);
    });
}

function logInput(id) {
    $('#' + id).keyup(function() {
        var cek = $(this).val();
        console.log(cek);
    });
}

function messageValid(pesan, data_res) {
    Swal.fire({
        html: pesan,
        // title: pesan,
        // text: pesan,
        icon: 'info',
        showDenyButton: true,
        // showCancelButton: true,
        buttonsStyling: false,
        // showCancelButton: true,
        confirmButtonText: "Oke..!",
        denyButtonText: 'Tidak..!',
        customClass: {
            confirmButton: "btn btn-primary",
            denyButton: "btn btn-danger",
            // cancelButton: 'btn btn-danger'
        },
    }).then(data_res);
}

function validate(text, dataPost) {
    Swal.fire({
        title: "Apakah anda yakin?",
        text: text,
        icon: 'warning',
        buttonsStyling: false,
        showCancelButton: true,
        confirmButtonText: "Ya, setuju!",
        customClass: {
            confirmButton: "btn btn-primary",
            cancelButton: 'btn btn-danger'
        },
    }).then(dataPost);
}

function valid(titles, message, icons) {
    Swal.fire({
        title: titles,
        text: message,
        icon: icons,
        buttonsStyling: false,
        confirmButtonText: "Oke, baiklah!",
        customClass: {
            confirmButton: "btn btn-primary"
        }
    });
}

function message(icon, title, pesan) {
    Swal.fire({
        icon: icon,
        title: title,
        text: pesan,
        // buttonsStyling: false,
    });
}

function pesan(pesan) {
    Swal.fire({
        title: pesan,
        icon: "info",
        buttonsStyling: false,
        confirmButtonText: "Oke!",
        customClass: {
            confirmButton: "btn btn-primary"
        }
    });
}

function toster(icons, text, timers, tipe) {
    const Toast = Swal.mixin({
        toast: true,
        position: "top-end",
        showConfirmButton: false,
        timer: 3000,
        timerProgressBar: true,
        icon: "success",
        title: "Default",
        iconColor: 'white',
        customClass: {
            popup: 'colored-toast'
        },
        didOpen: (toast) => {
            toast.addEventListener('mouseenter', Swal.stopTimer)
            toast.addEventListener('mouseleave', Swal.resumeTimer)
        }
    });

    const Toaster = Swal.mixin({
        toast: true,
        position: 'top-end',
        showConfirmButton: false,
        timer: 3000,
        timerProgressBar: true,
        didOpen: (toast) => {
            toast.addEventListener('mouseenter', Swal.stopTimer)
            toast.addEventListener('mouseleave', Swal.resumeTimer)
        }
    });

    if (tipe==1) {
        Toast.fire({
            title: text,
            icon: icons,
            timer: timers,
        });
    } else if (tipe==2) {
        Toaster.fire({
            title: text,
            icon: icons,
            timer: timers,
        });
    }
}

function viewPdf(filePdf, idCanvas, go_previous, go_next, current_page, tot_page, zoom_in, zoom_out) {
    $('#' + filePdf).change(function(e) {
        var file = e.target.files[0];
        var fileReader = new FileReader();
        // console.log(file);
        fileReader.onload = function() {
            // console.log(this.result);
            pdfConfig(
                this.result,
                idCanvas,
                go_previous,
                go_next,
                current_page,
                tot_page,
                zoom_in,
                zoom_out
            );
        }
        fileReader.readAsDataURL(file);
    });
}

function pdfConfig(filePdf, idCanvas, go_previous, go_next, current_page, tot_page, zoom_in, zoom_out) {
    var myState = {
        pdf: null,
        currentPage: 1,
        scale: 1,
        zoom: 1
    }

    pdfjsLib.getDocument(filePdf).then((pdf) => {

        myState.pdf = pdf;
        $('#' + tot_page).val(pdf.numPages);
        // console.log(pdf.numPages);
        render();

    });

    function render() {
        myState.pdf.getPage(myState.currentPage).then((page) => {

            var canvas = document.getElementById(idCanvas);
            var ctx = canvas.getContext('2d');

            var viewport = page.getViewport(myState.zoom);

            canvas.width = viewport.width;
            canvas.height = viewport.height;

            page.render({
                canvasContext: ctx,
                viewport: viewport
            });
        });
    }

    $('#' + go_previous).click(function(e) {
        e.preventDefault();
        if (myState.pdf == null || myState.currentPage == 1) {
            return;
        } else {
            myState.currentPage -= 1;
            $('#' + current_page).val(myState.currentPage);
            render();
            return;
        }
    });

    $('#' + go_next).click(function(e) {
        e.preventDefault();
        if (myState.pdf == null || myState.currentPage >= myState.pdf._pdfInfo.numPages) {
            return;
        } else {
            myState.currentPage += 1;
            $('#' + current_page).val(myState.currentPage);
            render();
            return;
        }
    });

    $('#' + current_page).keypress(function(e) {
        e.preventDefault();
        if (myState.pdf == null) {
            return;
        } else {
            // Get key code
            var code = (e.keyCode ? e.keyCode : e.which);

            // If key code matches that of the Enter key
            if (code == 13) {
                var desiredPage = document.getElementById(current_page).valueAsNumber;

                if (desiredPage >= 1 && desiredPage <= myState.pdf._pdfInfo.numPages) {
                    myState.currentPage = desiredPage;
                    $('#' + current_page).val(desiredPage);
                    render();
                }
            }
            render();
            return;
        }
    });

    $('#' + zoom_in).click(function(e) {
        e.preventDefault();
        if (myState.pdf == null) {
            return;
        } else {
            myState.zoom += 0.5;
            render();
            return;
        }
    });

    $('#' + zoom_out).click(function(e) {
        e.preventDefault();
        if (myState.pdf == null) {
            return;
        } else {
            myState.zoom -= 0.5;
            render();
            return;
        }
    });
}

function submitImportSoc(idForm, idBtn, title, urlAjax, idVal, resSs) {
    $('#' + idForm).submit(function(e) {
        e.preventDefault();
        var formData = new FormData(this);
        bsimpan(idBtn, 'Please wait..');
        Swal.fire({
            title: title,
            icon: 'warning',
            buttonsStyling: false,
            showCancelButton: true,
            confirmButtonText: "Ya, simpan!",
            customClass: {
                confirmButton: "btn btn-primary",
                cancelButton: 'btn btn-danger'
            },
        }).then((result) => {
            if (result.isConfirmed) {
                // var status = result.value;
                $.ajax({
                    url: urlAjax,
                    type: "POST",
                    data: formData,
                    contentType: false,
                    processData: false,
                    cache: false,
                    beforeSend: function() {
                        bsimpan(idBtn, 'Please wait..');
                    },
                    success: function(res) {
                        console.log(res);
                        if ($.isEmptyObject(res.error)) {
                            if (res.success) {
                                setText(idVal, res.kode);
                                Swal.fire(
                                    'Berhasil!',
                                    res.success,
                                    'success'
                                ).then(resSs);
                            } else {
                                Swal.fire(
                                    'Gagal!',
                                    res.errors,
                                    'error'
                                ).then((res) => {
                                    bsimpan(idBtn, 'Simpan');
                                });
                            }
                        } else {
                            bsimpan(idBtn, 'Simpan');
                            Swal.fire(
                                'Oops...!',
                                'Field harus ter isi!',
                                'error'
                            );
                            messages(res.error);
                        }
                    },
                    complete: function(data) {
                        bsimpan(idBtn, 'Simpan');
                    },
                    error: function(err) {
                        bsimpan(idBtn, 'Simpan');
                        console.log('Error:', err);
                        Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: 'Terjadi kesalahan!',
                        });
                    }
                });
            } else {
                bsimpan(idBtn, 'Simpan');
            }
        });
    });
}

function submitForm2(idForm, idBtn, metod, urlAjax, aksiRes) {
    $('#' + idBtn).click(function(e) {
        e.preventDefault();
        var dataFrx = $('#' + idForm).serialize();
        bsimpan(idBtn, 'Please wait..');

        Swal.fire({
            title: "Apakah anda yakin?",
            text: "Data yang di inputkan sudah benar!",
            icon: 'warning',
            buttonsStyling: false,
            showCancelButton: true,
            confirmButtonText: "Ya, simpan!",
            customClass: {
                confirmButton: "btn btn-primary",
                cancelButton: 'btn btn-danger'
            },
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    url: urlAjax,
                    type: metod,
                    data: dataFrx,
                    dataType: 'json',
                    cache: false,
                    beforeSend: function() {
                        bsimpan(idBtn, 'Please wait..');
                    },
                    success: function(res) {
                        console.log(res);
                        if ($.isEmptyObject(res.error)) {
                            // console.log(res);
                            Swal.fire(
                                'Berhasil!',
                                res.success,
                                'success'
                            ).then(aksiRes);
                        } else {
                            bsimpan(idBtn, 'Simpan');
                            Swal.fire({
                                icon: 'error',
                                title: 'Oops...',
                                text: 'Field harus ter isi!',
                            });
                            messages(res.error);
                        }
                    },
                    complete: function(data) {
                        bsimpan(idBtn, 'Simpan');
                    },
                    error: function(err) {
                        console.log('Error:', err);
                        bsimpan(idBtn, 'Simpan');
                    }
                });
            } else {
                bsimpan(idBtn, 'Simpan');
            }
        });
    });
}

function submitForm(idForm, idBtn, metod, urlAjax, aksiRes, errRes) {
    $('#' + idForm).submit(function(e) {
        e.preventDefault();
        var formData = new FormData(this);
        bsimpan(idBtn, 'Please wait..');

        Swal.fire({
            title: "Apakah anda yakin?",
            text: "Data yang di inputkan sudah benar!",
            icon: 'warning',
            buttonsStyling: false,
            showCancelButton: true,
            confirmButtonText: "Ya, simpan!",
            customClass: {
                confirmButton: "btn btn-primary",
                cancelButton: 'btn btn-danger'
            },
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    url: urlAjax,
                    type: metod,
                    data: formData,
                    contentType: false,
                    processData: false,
                    cache: false,
                    beforeSend: function() {
                        bsimpan(idBtn, 'Please wait..');
                    },
                    success: function(res) {
                        console.log(res);
                        if ($.isEmptyObject(res.error)) {
                            // console.log(res);
                            Swal.fire(
                                'Berhasil!',
                                res.success,
                                'success'
                            ).then(aksiRes);
                        } else {
                            bsimpan(idBtn, 'Simpan');
                            Swal.fire(
                                'Oops...!',
                                'Field harus ter isi!',
                                'error'
                            ).then(errRes);
                            messages(res.error);
                        }
                    },
                    complete: function(data) {
                        bsimpan(idBtn, 'Simpan');
                    },
                    error: function(err) {
                        console.log('Error:', err);
                        bsimpan(idBtn, 'Simpan');
                        Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: 'Terjadi kesalahan!',
                        });
                    }
                });
            } else {
                bsimpan(idBtn, 'Simpan');
            }
        });
    });
}

function submitDelete(kode, urlx, resSuccess, resError) {
    Swal.fire({
        title: 'Apakah anda yakin?',
        text: "Akan menghapus data dengan kode " + kode + " !",
        icon: 'warning',
        buttonsStyling: false,
        showCancelButton: true,
        confirmButtonText: "Ya, hapus!",
        customClass: {
            confirmButton: "btn btn-primary",
            cancelButton: 'btn btn-danger'
        },
    }).then((result) => {
        if (result.isConfirmed) {
            Swal.fire(
            'Terhapus!',
            'Anda berhasil menghapus data dengan kode ' + kode + ".",
            'success'
            ).then((result) => {
                $.ajax({
                    url: urlx,
                    type: "DELETE",
                    success: resSuccess,
                    error: resError
                });
            });
        }
    });
}

function post(url, respon) {
    $.post(url, respon);
}

function selectGrids(kode, metod, url, idFild, textFild, colom, onselect) {
    $(kode).combogrid({
        // delay: 500,
        // panelWidth:250,
        mode:'remote',
        method: metod,
        url: url,
        idField: idFild,
        textField: textFild,
        fitColumns: true,
        columns:[colom],
        onSelect: onselect
    });
}

function selectGrid(kode, metod, url, idFild, textFild, colom, onselect) {
    $('#' + kode).combogrid({
        // delay: 500,
        // panelWidth:250,
        mode:'remote',
        method: metod,
        url: url,
        idField: idFild,
        textField: textFild,
        fitColumns: true,
        columns:[colom],
        onSelect: onselect
    });
}

function reSelGrid(kode, ur) {
    $('#' + kode).combogrid('grid').datagrid({ url: ur });
}

function selectBox(kode, metod, url, val, text, onselect, group) {
    $('#' + kode).combobox({
        method: metod,
        url: url,
        valueField: val,
        textField: text,
        onSelect: onselect,
        groupField: group,
    });
}

function reSelBox(kode, url) {
    $('#' + kode).combobox('reload', url);
}

function jsonForm(kode, respon) {
    var id = $('#' + kode);
    if(id.hasClass('form-mixs')) {
        id.form('load', respon);
    }
    id.formToJson(respon);
}

function lodJson(tipe, route, respon) {
    $.ajax({
        type: tipe,
        url: route,
        success: respon
    });
}

function setHtml(kode, respon) {
    $(kode).html(respon);
}
