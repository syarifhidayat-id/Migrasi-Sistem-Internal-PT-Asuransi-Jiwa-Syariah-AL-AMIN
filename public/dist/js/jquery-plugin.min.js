function bsimpan(id, text) {
    $('#' + id).html('<i class="fa-solid fa-floppy-disk"></i> ' + text);
}

function tombol (kondisi, idBtn, isinya) {
    $('body').on(kondisi, '#'+idBtn, isinya);
}

function messages(msg) {
    $.each(msg, function(key, val) {
        // console.log(key);
        $('.' + key + '_err').text(val);
    });
}

function setHide(kode, kondisi) {
    var id = $('#' + kode);
    if (kondisi == true) {
        return id.hide();
    }
    if (kondisi == false) {
        return id.show();
    }
}

function hidePesan(kode) {
    $('#' + kode).change(function(e) {
        e.preventDefault();
        $('.' + kode + '_err').text('');
    });

    $('#' + kode).keyup(function(e) {
        e.preventDefault();
        $('.' + kode + '_err').text('');
    });
}

function clearForm(kode) {
    $('#' + kode).trigger('reset');
    $('#' + kode).form('clear');
}

function clearSelect() {
    $('form .form-select').val(null).trigger('change');
}

function reset() {
    location.reload(true);
}

function openModal(idModal) {
    $('#' + idModal).attr({
        'data-bs-backdrop': 'static',
        'data-bs-keyboard': 'false',
        'aria-labelledby': 'staticBackdropLabel',
    }).modal('show');
}

function closeModal(idModal) {
    $('#' + idModal).modal('hide');
}

function titleAction(id, text) {
    $('#' + id).text(text);
}

function selectTable (kode, url, valText, valId, field, fieldcustom) {
    $("#" + kode).inputpicker({
        headShow: true,
        url: url,
        // urlHeaders: {
        //     "X-Token": $('meta[name="csrf-token"]').attr('content')
        // },
        fields:field,
        fieldText : valText,
        fieldValue: valId,
        fields: fieldcustom,
        filterOpen: true,
        autoOpen: true,
    });
}

function selectOp(kode) {
    $('#' + kode).select2();
}

function selectOpTag(kode) {
    $('#' + kode).select2({
        tags: true,
    });
}

function selectOpReq(kode) {
    $('#' + kode).addClass('required_sel');
    $('#' + kode).select2();
}

function selectOpReqTag(kode) {
    $('#' + kode).addClass('required_sel');
    $('#' + kode).select2({
        tags: true,
    });
}

function selectServerSideTag(kode, url, data, getVal) {
    $('#' + kode).select2({
        tags: true,
        ajax: {
            url: url,
            dataType: 'json',
            delay: 250,
            processResults: data,
            cache: true
        }
    }).on('select2:select', getVal);
}

function selectEdit(kode, idVal, textVal) {
    var newOption = new Option(textVal, idVal, true, true);
    $('#' + kode).append(newOption).trigger('change');
}

function selectServerSide(kode, url, data, getVal) {
    $('#' + kode).select2({
        ajax: {
            url: url,
            // data: datacari,
            dataType: 'json',
            delay: 250,
            processResults: data,
            cache: true
        },
        // templateResult: formatRepo,
        // templateSelection: formatRepoSelection
    }).on('select2:select', getVal);
}

function selectServerSideReq(kode, url, data, getVal) {
    $('#' + kode).addClass('required_sel');
    $('#' + kode).select2({
        ajax: {
            url: url,
            dataType: 'json',
            delay: 250,
            processResults: data,
            cache: true,
        },
        // templateResult: formatRepo,
        // templateSelection: formatRepoSelection
    }).on('select2:select', getVal);
}

function changeSelect(id_get, id_val, url, data, getVal) {
    $('#' + id_get).change(function() {
        var kode = $(this).val();
        if (kode !== "" && kode !== null) {
            selectServerSideReq(
                id_val,
                url + '/' + kode,
                data,
                getVal
            );
        } else {
            $('#' + id_val).val(null).trigger('change');
        }
    });
}

function changeSelect2(id_get1, id_get2, id_val, url, data, getVal) {
    $('#' + id_get1).change(function() {
        var kode1 = $(this).val();
        if (kode1 !== "" && kode1 !== null) {
            $('#' + id_get2).change(function() {
                var kode2 = $(this).val();
                if (kode1 !== "" && kode1 !== null) {
                    selectServerSideReq(
                        id_val,
                        url + '/' + kode1 + '/' + kode2,
                        data,
                        getVal
                    );
                } else {
                    $('#' + id_val).val(null).trigger('change');
                }
            });
        } else {
            $('#' + id_val).val(null).trigger('change');
        }
    });
}

function setRequired (kode) {
    const id = $('#' + kode);
    if (id.hasClass('form-control')) {
        return id.addClass('required_sel');
    }
    if (id.hasClass('form-select')) {
        return id.addClass('required_sel');
    }
    if (id.hasClass('easyui-textbox')) {
        return id.textbox().next().addClass('textbox-required').hasClass('textbox-text');
    }
    if (id.hasClass('easyui-combobox')) {
        return id.combobox().next().addClass('textbox-required').hasClass('textbox-text');
    }
    if (id.hasClass('easyui-combogrid')) {
        return id.combogrid().next().addClass('textbox-required').hasClass('textbox-text');
    }
}

function setCheck (kode, kondisi) {
    const id = $(kode);
    return id.prop("checked", kondisi);
}

function setText(kode, v) {
    const id = $('#' + kode);
    if (id.hasClass('form-control')) {
        return id.val(v);
    }
    if (id.hasClass('form-select')) {
        const newOption = new Option(v, v, true, true);
        return id.append(newOption);
    }
    if (id.hasClass('easyui-textbox')) {
        return id.textbox('setValue', v);
    }
    if (id.hasClass('easyui-combobox')) {
        return id.combobox('setValue', v);
    }
    if (id.hasClass('easyui-combogrid')) {
        return id.combogrid('setValue', v);
    }
}

function setTextReq(kode) {
    $('#' + kode).val();
    $('#' + kode).addClass('required_sel');
}

function setSelect(kode, value) {
    var newOption = new Option(value, value, true, true);
    const id = $('#' + kode);
    return id.append(newOption);
}

function setTextReadOnly(kode, kondisi) {
    const id = $('#' + kode);
    if (id.hasClass('form-control')) {
        if (kondisi == true) {
            id.prop('readonly', kondisi);
            id.css({ 'background-color': 'rgba(255, 204, 138, 0.514)' });
            // id.addClass('required_sel');
        }
        if (kondisi == false) {
            id.prop('readonly', kondisi);
            id.css({ 'background-color': 'rgba(255, 204, 138, 0.514)' });
            // id.addClass('required_sel');
        }
    }
    if (id.hasClass('form-select')) {
        if (kondisi == true) {
            id.css({ 'background-color': 'rgba(255, 204, 138, 0.514)' });
            // id.addClass('required_sel');
            id.prop('disabled', kondisi);
        }
        if (kondisi == false) {
            id.css({ 'background-color': 'rgba(255, 204, 138, 0.514)' });
            // id.addClass('required_sel');
            id.prop('disabled', kondisi);
        }
    }
    if (id.hasClass('easyui-textbox')) {
        if (kondisi == true) {
            id.css({ 'background-color': 'rgba(255, 204, 138, 0.514)' });
            // id.addClass('required_sel');
            id.prop('readonly', kondisi);
        }
        if (kondisi == false) {
            id.css({ 'background-color': 'rgba(255, 204, 138, 0.514)' });
            // id.addClass('required_sel');
            id.prop('readonly', kondisi);
        }
    }
}

function setSelectReadOnly(kode, kondisi) {
    const id = $('#' + kode);
    if (kondisi == true) {
        id.css({ 'background-color': 'rgba(255, 204, 138, 0.514)' });
        id.prop('disabled', kondisi);
        return;
    } else if (kondisi == false) {
        id.css({ 'background-color': '' });
        id.prop('disabled', kondisi);
        return;
    }
}

function getText(kode) {
    const id = $('#' + kode);
    if (id.hasClass('form-control') || id.hasClass('form-select')) {
        return id.val();
    }
    if (id.hasClass('easyui-textbox')) {
        return id.textbox('getValue');
    }
    if (id.hasClass('easyui-combobox')) {
        return id.combobox('getValue');
    }
    if (id.hasClass('easyui-combogrid')) {
        return id.combogrid('getValue');
    }
}

function getSelect(kode) {
    const id = $('#' + kode);
    // if (id !== "" && id !== null) {
    return id.val();
    // } else {
    //     return id.val('');
    // }
}

function logSelect(id) {
    $('#' + id).change(function() {
        var cek = $(this).val();
        console.log(cek);
    });
}

function logInput(id) {
    $('#' + id).keyup(function() {
        var cek = $(this).val();
        console.log(cek);
    });
}

function messageValidate(pesan, icon, btn_confirm, btn_deny, data_res) {
    Swal.fire({
        title: pesan,
        // text: pesan,
        icon: icon,
        showDenyButton: true,
        // showCancelButton: true,
        confirmButtonColor: '#3085d6',
        denyButtonColor: 'rgb(221, 176, 51)',
        cancelButtonColor: '#d33',
        confirmButtonText: btn_confirm,
        denyButtonText: btn_deny,
    }).then(data_res);
}

function message(icon, title, pesan) {
    Swal.fire({
        icon: icon,
        title: title,
        text: pesan,
    });
}

function pesan(pesan) {
    Swal.fire(
        pesan,
        '',
        'question'
    )
}

function viewPdf(filePdf, idCanvas, go_previous, go_next, current_page, tot_page, zoom_in, zoom_out) {
    $('#' + filePdf).change(function(e) {
        var file = e.target.files[0];
        var fileReader = new FileReader();
        // console.log(file);
        fileReader.onload = function() {
            // console.log(this.result);
            pdfConfig(
                this.result,
                idCanvas,
                go_previous,
                go_next,
                current_page,
                tot_page,
                zoom_in,
                zoom_out
            );
        }
        fileReader.readAsDataURL(file);
    });
}

function pdfConfig(filePdf, idCanvas, go_previous, go_next, current_page, tot_page, zoom_in, zoom_out) {
    var myState = {
        pdf: null,
        currentPage: 1,
        scale: 1,
        zoom: 1
    }

    pdfjsLib.getDocument(filePdf).then((pdf) => {

        myState.pdf = pdf;
        $('#' + tot_page).val(pdf.numPages);
        // console.log(pdf.numPages);
        render();

    });

    function render() {
        myState.pdf.getPage(myState.currentPage).then((page) => {

            var canvas = document.getElementById(idCanvas);
            var ctx = canvas.getContext('2d');

            var viewport = page.getViewport(myState.zoom);

            canvas.width = viewport.width;
            canvas.height = viewport.height;

            page.render({
                canvasContext: ctx,
                viewport: viewport
            });
        });
    }

    $('#' + go_previous).click(function(e) {
        e.preventDefault();
        if (myState.pdf == null || myState.currentPage == 1) {
            return;
        } else {
            myState.currentPage -= 1;
            $('#' + current_page).val(myState.currentPage);
            render();
            return;
        }
    });

    $('#' + go_next).click(function(e) {
        e.preventDefault();
        if (myState.pdf == null || myState.currentPage >= myState.pdf._pdfInfo.numPages) {
            return;
        } else {
            myState.currentPage += 1;
            $('#' + current_page).val(myState.currentPage);
            render();
            return;
        }
    });

    $('#' + current_page).keypress(function(e) {
        e.preventDefault();
        if (myState.pdf == null) {
            return;
        } else {
            // Get key code
            var code = (e.keyCode ? e.keyCode : e.which);

            // If key code matches that of the Enter key
            if (code == 13) {
                var desiredPage = document.getElementById(current_page).valueAsNumber;

                if (desiredPage >= 1 && desiredPage <= myState.pdf._pdfInfo.numPages) {
                    myState.currentPage = desiredPage;
                    $('#' + current_page).val(desiredPage);
                    render();
                }
            }
            render();
            return;
        }
    });

    $('#' + zoom_in).click(function(e) {
        e.preventDefault();
        if (myState.pdf == null) {
            return;
        } else {
            myState.zoom += 0.5;
            render();
            return;
        }
    });

    $('#' + zoom_out).click(function(e) {
        e.preventDefault();
        if (myState.pdf == null) {
            return;
        } else {
            myState.zoom -= 0.5;
            render();
            return;
        }
    });
}

function submitImportSoc(idForm, idBtn, title, urlAjax, idVal, resSs) {
    $('#' + idForm).submit(function(e) {
        e.preventDefault();
        var formData = new FormData(this);
        bsimpan(idBtn, 'Please wait..');
        Swal.fire({
            title: title,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Ya, simpan!'
        }).then((result) => {
            if (result.isConfirmed) {
                // var status = result.value;
                $.ajax({
                    url: urlAjax,
                    type: "POST",
                    data: formData,
                    contentType: false,
                    processData: false,
                    cache: false,
                    beforeSend: function() {
                        bsimpan(idBtn, 'Please wait..');
                    },
                    success: function(res) {
                        console.log(res);
                        if ($.isEmptyObject(res.error)) {
                            if (res.success) {
                                setText(idVal, res.kode);
                                Swal.fire(
                                    'Berhasil!',
                                    res.success,
                                    'success'
                                ).then(resSs);
                            } else {
                                Swal.fire(
                                    'Gagal!',
                                    res.errors,
                                    'error'
                                ).then((res) => {
                                    bsimpan(idBtn, 'Simpan');
                                });
                            }
                        } else {
                            bsimpan(idBtn, 'Simpan');
                            Swal.fire(
                                'Oops...!',
                                'Field harus ter isi!',
                                'error'
                            );
                            messages(res.error);
                        }
                    },
                    complete: function(data) {
                        bsimpan(idBtn, 'Simpan');
                    },
                    error: function(err) {
                        bsimpan(idBtn, 'Simpan');
                        console.log('Error:', err);
                        Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: 'Terjadi kesalahan!',
                        });
                    }
                });
            } else {
                bsimpan(idBtn, 'Simpan');
            }
        });
    });
}

function submitForm2(idForm, idBtn, metod, urlAjax, aksiRes) {
    $('#' + idBtn).click(function(e) {
        e.preventDefault();
        var dataFrx = $('#' + idForm).serialize();
        bsimpan(idBtn, 'Please wait..');

        Swal.fire({
            title: "Apalah anda yakin?",
            text: "Data yang di inputkan sudah benar!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Ya, simpan!'
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    url: urlAjax,
                    type: metod,
                    data: dataFrx,
                    dataType: 'json',
                    cache: false,
                    beforeSend: function() {
                        bsimpan(idBtn, 'Please wait..');
                    },
                    success: function(res) {
                        console.log(res);
                        if ($.isEmptyObject(res.error)) {
                            // console.log(res);
                            Swal.fire(
                                'Berhasil!',
                                res.success,
                                'success'
                            ).then(aksiRes);
                        } else {
                            bsimpan(idBtn, 'Simpan');
                            Swal.fire({
                                icon: 'error',
                                title: 'Oops...',
                                text: 'Field harus ter isi!',
                            });
                            messages(res.error);
                        }
                    },
                    complete: function(data) {
                        bsimpan(idBtn, 'Simpan');
                    },
                    error: function(err) {
                        console.log('Error:', err);
                        bsimpan(idBtn, 'Simpan');
                    }
                });
            } else {
                bsimpan(idBtn, 'Simpan');
            }
        });
    });
}

function submitForm(idForm, idBtn, metod, urlAjax, aksiRes, errRes) {
    $('#' + idForm).submit(function(e) {
        e.preventDefault();
        var formData = new FormData(this);
        bsimpan(idBtn, 'Please wait..');

        Swal.fire({
            title: "Apakah anda yakin?",
            text: "Data yang di inputkan sudah benar!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Ya, simpan!'
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    url: urlAjax,
                    type: metod,
                    data: formData,
                    contentType: false,
                    processData: false,
                    cache: false,
                    beforeSend: function() {
                        bsimpan(idBtn, 'Please wait..');
                    },
                    success: function(res) {
                        console.log(res);
                        if ($.isEmptyObject(res.error)) {
                            // console.log(res);
                            Swal.fire(
                                'Berhasil!',
                                res.success,
                                'success'
                            ).then(aksiRes);
                        } else {
                            bsimpan(idBtn, 'Simpan');
                            Swal.fire(
                                'Oops...!',
                                'Field harus ter isi!',
                                'error'
                            ).then(errRes);
                            messages(res.error);
                        }
                    },
                    complete: function(data) {
                        bsimpan(idBtn, 'Simpan');
                    },
                    error: function(err) {
                        console.log('Error:', err);
                        bsimpan(idBtn, 'Simpan');
                        Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: 'Terjadi kesalahan!',
                        });
                    }
                });
            } else {
                bsimpan(idBtn, 'Simpan');
            }
        });
    });
}

function post (url, respon) {
    $.post(url, respon);
}

function validate (text, dataPost) {
    Swal.fire({
        title: "Apalah anda yakin?",
        text: text,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Ya, setuju!'
    }).then(dataPost);
}

function selectGrid (kode, metod, url, idFild, textFild, colom, onselect) {
    $('#' + kode).combogrid({
        delay: 500,
        // panelWidth:250,
        mode:'remote',
        method: metod,
        url: url,
        idField: idFild,
        textField: textFild,
        fitColumns: true,
        columns:[colom],
        onSelect: onselect
    });
}

function reSelGrid (kode, ur) {
    $('#' + kode).combogrid('grid').datagrid({ url: ur });
}

function selectBox (kode, metod, url, val, text, group, onselect) {
    $('#' + kode).combobox({
        method: metod,
        url: url,
        valueField: val,
        textField: text,
        groupField: group,
        onSelect: onselect,
    });
}

function reSelBox (kode, url) {
    $('#' + kode).combobox('reload', url);
}
